name: Rust CI with Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  MIN_COVERAGE_PERCENT: 80 # Set your minimum coverage threshold here

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xbrl-api-client
          path: target/debug/xbrl_api_client

  test_and_coverage:
    name: Test and Coverage
    needs: build # This makes test_and_coverage dependent on build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin --version 0.25.0
      
      - name: Run tests with coverage
        run: cargo tarpaulin --out Xml --output-dir coverage --workspace --exclude-files "tests/*" --verbose
      
      - name: Check coverage threshold
        id: coverage_check
        run: |
          echo "Running coverage check..."
          # Run tarpaulin and capture json output to a file
          cargo tarpaulin --out Json --output-dir coverage --workspace --exclude-files "tests/*" --verbose
          
          # Extract the coverage value from the JSON file
          coverage_value=$(cat coverage/tarpaulin-report.json | jq '.summary.line_coverage * 100' | cut -d. -f1)
          echo "Coverage value: $coverage_value%"
          
          # Set the coverage value as an output parameter
          echo "coverage=$coverage_value" >> $GITHUB_OUTPUT
          
          # Determine the color based on coverage value
          if [ "$coverage_value" -lt "60" ]; then
            echo "color=f44336" >> $GITHUB_OUTPUT
          elif [ "$coverage_value" -lt "70" ]; then
            echo "color=ff9800" >> $GITHUB_OUTPUT
          elif [ "$coverage_value" -lt "80" ]; then
            echo "color=ffeb3b" >> $GITHUB_OUTPUT
          else
            echo "color=4caf50" >> $GITHUB_OUTPUT
          fi
          
          if [ "$coverage_value" -lt "$MIN_COVERAGE_PERCENT" ]; then
            echo "Test coverage is below threshold: $coverage_value% < $MIN_COVERAGE_PERCENT%"
            exit 1
          else
            echo "Test coverage meets threshold: $coverage_value% >= $MIN_COVERAGE_PERCENT%"
          fi
      
      # Generate coverage badge on shields.io
      - name: Generate and Publish Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ steps.coverage_check.outputs.coverage }}%
          color: ${{ steps.coverage_check.outputs.color }}
          namedLogo: rust
      
      # Additionally upload badge as workflow artifact
      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: error
