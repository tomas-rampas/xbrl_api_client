name: Rust CI with Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  MIN_COVERAGE_PERCENT: 80 # Set your minimum coverage threshold here

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xbrl-api-client
          path: target/debug/xbrl_api_client

  test_and_coverage:
    name: Test and Coverage
    needs: build # This makes test_and_coverage dependent on build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: xbrl-api-client
          path: target/debug/

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin --version 0.25.0
      
      - name: Run tests with coverage
        run: cargo tarpaulin --out Json --out Xml --output-dir coverage --workspace --exclude-files "tests/*" --verbose
      
      - name: Calculate Coverage
        id: coverage_check
        run: |
          echo "Running coverage check..."
          # Run tarpaulin and capture json output to a file
          # cargo tarpaulin --out Json --output-dir coverage --workspace --exclude-files "tests/*" --verbose
          
          # Extract the coverage value from the JSON file and save to environment
          COVERAGE_VALUE=$(cat coverage/tarpaulin-report.json | jq '.summary.line_coverage * 100' | cut -d. -f1)
          echo "Coverage value: $COVERAGE_VALUE%"
          
          # Set outputs explicitly for use in later steps
          echo "coverage=$COVERAGE_VALUE" >> $GITHUB_OUTPUT
          
          # Debug output to verify it's being set
          echo "Debug - Output values set:"
          echo "coverage=$COVERAGE_VALUE"
          
          # Determine the color based on coverage value
          if [ "$COVERAGE_VALUE" -lt "60" ]; then
            COLOR="f44336"
          elif [ "$COVERAGE_VALUE" -lt "70" ]; then
            COLOR="ff9800"
          elif [ "$COVERAGE_VALUE" -lt "80" ]; then
            COLOR="ffeb3b"
          else
            COLOR="4caf50"
          fi
          
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "color=$COLOR"
          
          # Save in environment for later steps
          echo "COVERAGE_VALUE=$COVERAGE_VALUE" >> $GITHUB_ENV
          echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV
      
      - name: Check coverage threshold
        run: |
            if [ "${{ env.COVERAGE_VALUE }}" -lt "${{ env.MIN_COVERAGE_PERCENT }}" ]; then
              echo "Test coverage is below threshold: ${{ env.COVERAGE_VALUE }}% < ${{ env.MIN_COVERAGE_PERCENT }}%"
              exit 1
            else
              echo "Test coverage meets threshold: ${{ env.COVERAGE_VALUE }}% >= ${{ env.MIN_COVERAGE_PERCENT }}%"
            fi

      # Generate coverage badge on shields.io
      - name: Generate and Publish Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ env.COVERAGE_VALUE }}%
          color: ${{ env.COVERAGE_COLOR }}
          namedLogo: rust
      
      # Additionally upload badge as workflow artifact
      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: error