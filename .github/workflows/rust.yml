name: Rust CI with Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  MIN_COVERAGE_PERCENT: 80 # Set your minimum coverage threshold here

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xbrl-api-client
          path: target/debug/xbrl_api_client

  test_and_coverage:
    name: Test and Coverage
    needs: build # This makes test_and_coverage dependent on build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin --version 0.25.0
      
      - name: Run tests with coverage
        run: cargo tarpaulin --out Xml --output-dir coverage --workspace --exclude-files "tests/*" --verbose
      
      - name: Calculate Coverage
        id: coverage_check
        run: |
          echo "Running coverage check..."
          # Run tarpaulin and capture json output to a file
          cargo tarpaulin --out Json --output-dir coverage --workspace --exclude-files "tests/*" --verbose
          
          # Check if JSON file exists
          if [ ! -f "coverage/tarpaulin-report.json" ]; then
            echo "Error: tarpaulin-report.json not found"
            exit 1
          fi
          
          # Debug: output the JSON structure to understand it better
          echo "JSON structure:"
          cat coverage/tarpaulin-report.json
          
          # First, try to get the value directly from tarpaulin output - visible in the log
          COVERAGE_RAW=$(grep -o '[0-9.]*% coverage' coverage/*.txt | grep -o '[0-9.]*' | head -1)
          echo "Raw coverage from log: $COVERAGE_RAW%"
          
          # If that fails, try to extract it from the JSON
          if [ -z "$COVERAGE_RAW" ]; then
            # Save the JSON to a variable
            JSON_CONTENT=$(cat coverage/tarpaulin-report.json)
            
            # Try different JSON paths that might contain coverage info
            COVERAGE_RAW=$(echo "$JSON_CONTENT" | jq -r 'if .coverage != null then .coverage elif .report.coverage != null then .report.coverage elif .summary.line_coverage != null then (.summary.line_coverage * 100) else empty end')
            
            # If still empty, calculate from covered and total lines
            if [ -z "$COVERAGE_RAW" ]; then
              COVERED=$(echo "$JSON_CONTENT" | jq -r 'if .covered != null then .covered elif .report.covered != null then .report.covered else 0 end')
              TOTAL=$(echo "$JSON_CONTENT" | jq -r 'if .total != null then .total elif .report.total != null then .report.total else 1 end')
              
              # Calculate percentage if both values are valid
              if [ "$TOTAL" -ne 0 ]; then
                COVERAGE_RAW=$(awk "BEGIN {printf \"%.2f\", ($COVERED/$TOTAL)*100}")
              else
                COVERAGE_RAW="0"
              fi
            fi
          fi
          
          # Convert to integer (remove decimal part)
          COVERAGE_VALUE=$(echo "$COVERAGE_RAW" | cut -d. -f1)
          
          # Ensure we have a valid number, default to 0 if not
          if [[ ! "$COVERAGE_VALUE" =~ ^[0-9]+$ ]]; then
            echo "Warning: Failed to extract valid coverage number, defaulting to 0"
            COVERAGE_VALUE="0"
          fi
          
          echo "Final coverage value: $COVERAGE_VALUE%"
          
          # Set outputs explicitly for use in later steps
          echo "coverage=$COVERAGE_VALUE" >> $GITHUB_OUTPUT
          
          # Determine the color based on coverage value
          if [ "$COVERAGE_VALUE" -lt "60" ]; then
            COLOR="f44336"
          elif [ "$COVERAGE_VALUE" -lt "70" ]; then
            COLOR="ff9800"
          elif [ "$COVERAGE_VALUE" -lt "80" ]; then
            COLOR="ffeb3b"
          else
            COLOR="4caf50"
          fi
          
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          
          # Save in environment for later steps
          echo "COVERAGE_VALUE=$COVERAGE_VALUE" >> $GITHUB_ENV
          echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV
      
      - name: Check coverage threshold
        run: |
          if [ "$COVERAGE_VALUE" -lt "$MIN_COVERAGE_PERCENT" ]; then
            echo "Test coverage is below threshold: $COVERAGE_VALUE% < $MIN_COVERAGE_PERCENT%"
            exit 1
          else
            echo "Test coverage meets threshold: $COVERAGE_VALUE% >= $MIN_COVERAGE_PERCENT%"
          fi
      
      # Generate coverage badge on shields.io
      - name: Generate and Publish Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ env.COVERAGE_VALUE }}%
          color: ${{ env.COVERAGE_COLOR }}
          namedLogo: rust
      
      # Additionally upload badge as workflow artifact
      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: error
